/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.panosmatsinopoulos.coroutineexceptionhandling

import kotlinx.coroutines.*

fun log(message: String) {
    println("[${Thread.currentThread().name}] $message")
}

@OptIn(DelicateCoroutinesApi::class)
fun main() {
    runBlocking {
        val job = GlobalScope.launch {
            log("launch in GlobalScope: $coroutineContext")
            log("throwing exception from 'launch'")
            throw IndexOutOfBoundsException()
        }
        job.join()
        log("joined failed job")

        val deferred = GlobalScope.async {
            log("async in GlobalScope: $coroutineContext")
            log("throwing exception from async")
            throw ArithmeticException()
        }
        try {
            deferred.await()
            // this point here is unreachable
        } catch (e: ArithmeticException) {
            log("Caught Arithmetic Exception")
        }
    }
}
