/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.panosmatsinopoulos.coroutineexceptionhandling

import kotlinx.coroutines.*

fun log(message: String) {
    println("[${Thread.currentThread().name}] $message")
}

@OptIn(DelicateCoroutinesApi::class)
fun main() {
    runBlocking {
        val handler = CoroutineExceptionHandler { coroutineContext, throwable ->
            log("CoroutineExceptionHandler got exception: $throwable (coroutineContext is: $coroutineContext)")
        }
        val job = GlobalScope.launch(handler) {
            log("launch in GlobalScope: $coroutineContext")
            log("throwing exception from 'launch'")
            throw AssertionError()
        }
        val deferred = GlobalScope.async(handler) {
            log("async in GlobalScope: $coroutineContext")
            log("throwing exception from async")
            throw ArithmeticException()
        }
        joinAll(job, deferred)
    }
}
